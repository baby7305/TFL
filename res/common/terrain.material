material terrain
{

    technique depth
    {
    
        u_matrix = WORLD_VIEW_PROJECTION_MATRIX

        renderState
        {
            depthTest = true
			depthFunc = LEQUAL
        }
        
        pass
        {
            vertexShader = res/shaders/depth.vert
            fragmentShader = res/shaders/depth.frag
        }
    }
    
    technique shadow
    {
        renderState
        {
            cullFace = true
            depthTest = true
        }
        pass
        {
            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX

            u_normalMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
			u_directionalLightDirection[0] = LIGHT_DIRECTION
            u_directionalLightColor[0] = LIGHT_COLOR
            
            u_surfaceLayerMap = TERRAIN_LAYER_MAP
			
            u_shadowMap=SHADOW_MAP
            u_matrix = LIGHT_MATRIX
            u_model= WORLD_MATRIX 
            u_mapSize =MAP_SIZE
			u_bias = BIAS
            
        
            vertexShader = res/shaders/terrain.vert
            fragmentShader = res/shaders/terrain.frag
            defines = DIRECTIONAL_LIGHT_COUNT 1
        }
    }
}
