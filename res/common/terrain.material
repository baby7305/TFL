material terrain
{

    technique depth
    {
    
        u_matrix = WORLD_VIEW_PROJECTION_MATRIX

        renderState
        {
            depthTest = true
        }
        
        pass
        {
            vertexShader = res/shaders/depth.vert
            fragmentShader = res/shaders/depth.frag
        }
    }
    
    technique shadow
    {
        renderState
        {
            cullFace = true
            depthTest = true
            depthFunc = LEQUAL
        }
        pass
        {
            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX

            u_normalMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
            u_directionalLightDirection[0] = LIGHT_DIRECTION
            u_directionalLightColor[0] = LIGHT_COLOR
            
            u_surfaceLayerMap = TERRAIN_LAYER_MAP
            u_normalMap = TERRAIN_NORMAL_MAP
                
            u_shadowMap=SHADOW_MAP
            u_matrix = LIGHT_MATRIX
            u_model= WORLD_MATRIX 
            u_mapSize =MAP_SIZE
            u_bias = BIAS
            
        
            vertexShader = res/shaders/terrain.vert
            fragmentShader = res/shaders/terrain.frag
            defines = DIRECTIONAL_LIGHT_COUNT 1
        }
    }
	
	technique water
    {
        renderState
        {
			blend = true
			blendSrc = ONE_MINUS_CONSTANT_ALPHA
			blendDst = CONSTANT_ALPHA
		
            cullFace = true
			frontFace =CW
            depthTest = true
            depthFunc = LEQUAL
			stencilOpSfail = KEEP 
			stencilOpDpfail = KEEP 
			stencilOpDppass = KEEP
			stencilFunc = EQUAL
			stencilFuncRef =1
			stencilTest = true
			stencilWrite = 0 
        }
        pass
        {
            u_viewProjectionMatrix = VIEW_PROJECTION_MATRIX

            u_normalMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
            u_directionalLightDirection[0] = LIGHT_DIRECTION
            u_directionalLightColor[0] = LIGHT_COLOR
            
            u_surfaceLayerMap = TERRAIN_LAYER_MAP
            u_normalMap = TERRAIN_NORMAL_MAP
                
            u_shadowMap=SHADOW_MAP
            u_matrix = LIGHT_MATRIX
            u_model= WORLD_MATRIX 
            u_mapSize =MAP_SIZE
            u_bias = BIAS
                    
            vertexShader = res/shaders/terrain.vert
            fragmentShader = res/shaders/terrain.frag
            defines = DIRECTIONAL_LIGHT_COUNT 1;WATER
        }
    }
}
