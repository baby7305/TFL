material shared
{       
    technique depth
    {
    
        u_matrix = WORLD_VIEW_PROJECTION_MATRIX

        renderState
        {
            depthTest = true
        }
        
        pass
        {
            vertexShader = res/shaders/depth.vert
            fragmentShader = res/shaders/depth.frag
        }
    }
}

material red:shared
{
	technique shadow
    { 
        renderState
        {
            cullFace = true
            depthTest = true
        }
        
        pass
        {
            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
            u_directionalLightDirection[0] = LIGHT_DIRECTION
            u_directionalLightColor[0] = LIGHT_COLOR
            u_ambientColor = SCENE_AMBIENT_COLOR
            
            u_shadowMap=SHADOW_MAP
            u_matrix = LIGHT_MATRIX
            u_model= WORLD_MATRIX 
            u_mapSize =MAP_SIZE
			u_bias = BIAS
            
            vertexShader = res/shaders/textured.vert
            fragmentShader = res/shaders/textured.frag
            defines = DIRECTIONAL_LIGHT_COUNT 1

            sampler u_diffuseTexture
            {
                path = res/common/red.png
                mipmap = false
                wrapS = REPEAT
                wrapT = REPEAT
                minFilter = NEAREST
                magFilter = NEAREST
            }
        }
    }
}

material gray:shared
{
	technique shadow
    { 
        renderState
        {
            depthTest = true
        }
        
        pass
        {
            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
            u_directionalLightDirection[0] = LIGHT_DIRECTION
            u_directionalLightColor[0] = LIGHT_COLOR
            u_ambientColor = SCENE_AMBIENT_COLOR
            
            u_shadowMap=SHADOW_MAP
            u_matrix = LIGHT_MATRIX
            u_model= WORLD_MATRIX 
            u_mapSize =MAP_SIZE
			u_bias = BIAS
            
            vertexShader = res/shaders/textured.vert
            fragmentShader = res/shaders/textured.frag
            defines = DIRECTIONAL_LIGHT_COUNT 1

            sampler u_diffuseTexture
            {
                path = res/common/gray.png
                mipmap = false
                wrapS = REPEAT
                wrapT = REPEAT
                minFilter = NEAREST
                magFilter = NEAREST
            }
        }
    }
}

